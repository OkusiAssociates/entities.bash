#!/bin/bash
declare -ix _ent_MINIMAL=1
declare -- _ent_0 PRG PRGDIR
declare -x _ent_scriptstatus="[\$0=$0]"
	if ((SHLVL > 1)) || [[ ! $0 == ?'bash' ]]; then
		_ent_0="$(/bin/readlink -fn -- "$0")" || _ent_0=''
		_ent_scriptstatus+="[is.script][\$_ent_0=${_ent_0}]"
		if [[ "$(/bin/readlink -fn -- "${BASH_SOURCE[0]:-}")" == "$_ent_0" ]]; then
			_ent_scriptstatus+='[execute]'
			declare -ix _ent_LOADED=0
			while (($#)); do
				case "$1" in
					help)	
							exec "${ENTITIES:-/lib/include/entities}/entities.help" "${@:2}"
							exit $?
							break;;
					-h|--help)	
							source "${ENTITIES:-/lib/include/entities}/e.d/entities.version.bash"
							cat <<-etx
								Program : entities.bash
								Version : ${_ent_VERSION:- Entities.bash version not found. Check installation.}
								Synopsis: 0. entities.bash [help] [-V|--version] [-h|--help] 
								        : 1. source entities.bash [new] 
							etx
							exit 0;;
					-V|--version)
							source "${ENTITIES:-/lib/include/entities}/e.d/entities.version.bash"
							echo "$_ent_VERSION"
							exit ;;	
					-*)	echo >&2 "$(basename "$0"): Bad option [$1]";		exit 22;;
					*)	echo >&2 "$(basename "$0"): Bad argument [$1]";	exit 22;;
				esac
				shift
			done		
			exit $?
		fi
		_ent_scriptstatus+='[sourced-from-script][SHLVL='"$SHLVL"']'
		PRG=$(/usr/bin/basename "$_ent_0")
		PRGDIR=$(/usr/bin/dirname "$_ent_0")
		_ent_scriptstatus+="[PRGDIR=$PRGDIR]"
		if (( ! $# )); then
			(( ${_ent_LOADED:-0} )) && return 0
		fi
	else
		_ent_scriptstatus+='[sourced-from-shell][SHLVL='"$SHLVL"']'
		_ent_0=$(/bin/readlink -fn -- "${BASH_SOURCE[0]}") || _ent_0=''
		PRG=$(/usr/bin/basename "$_ent_0")
		PRGDIR=$(/usr/bin/dirname "$_ent_0")
		_ent_scriptstatus+="[PRGDIR=$PRGDIR]"
		if [[ -n "${ENTITIES:-}" ]]; then
			PATH="${PATH//\:${ENTITIES}/}"
			PATH="${PATH//\:\:/\:}"
		fi
		export ENTITIES="$PRGDIR"
		export PATH="${PATH}:${ENTITIES}"		
		declare -ix _ent_LOADED=0		# always reload when sourced from command line
	fi
	while (( $# )); do
		case "${1,,}" in
			new)			_ent_LOADED=0;;
			inherit)	_ent_LOADED=${_ent_LOADED:-0};;
			*)				break;;
		esac
		shift
	done
(( ${_ent_LOADED:-0} )) && return 0;
declare -ix _ent_LOADED=0
_ent_scriptstatus+='[reloading]'
set +o errexit +o nounset +o pipefail
shopt -s extglob
shopt -s globstar
declare -x \
	io_='stdio="";' 								\
	io_die='std=2;die=1;errno=1;' 	\
	io_emerg='std=2;die=1;errno=1;' \
	io_alert='std=2;die=1;errno=1;' \
	io_crit='std=2;die=1;errno=1;' 	\
	io_err='std=2;' 								\
	io_warning='std=2;' 						\
	io_notice='std=1;' 							\
	io_info='std=1;' 								\
	io_debug='std=2;' 							\
	io_sys='std=2;log=1;' 
msgx() { 
	(( ! _ent_VERBOSE )) && return 0
	local -i std=1 die=0 log=0 raw=0 errno=0 tag=1
	local stdio='' sx
	if (($#)) && [[ ${1:0:2} == '--' ]]; then
		stdio="${1:2:8}"
		sx="io_$stdio"
		if [[ -v "$sx" ]]; then
			shift
			eval "${!sx}"
		else
			stdio=''
		fi
	fi
	while (($#)); do
		case $1 in
			-t|--notag)		tag=0;;
			-n|--raw)			raw=1;;
			-e|--errno)		std=2; shift; errno=$((${1:-0}));;
			-l|--log|log)	log=1;;
			*)						break;;
		esac
		shift
	done	
	((tag)) && ((_ent_MSG_USE_TAG)) && [[ -n $stdio ]] && _ent_MSG_PRE+=( "$stdio" )
	while (($#)); do
		if ((raw)); then
			((_ent_COLOR)) && { nc=color$stdio; echo -ne "${!nc}"; }
			echo >&${std} -en "$1"
			((_ent_COLOR)) && echo -ne "$colorreset"
		else
			((_ent_COLOR)) && { nc=color$stdio; echo -ne "${!nc}"; }
			if (( ${#_ent_MSG_PRE[*]} )); then
				p=${_ent_MSG_PRE[*]}
				echo -n "${p//[[:blank:]]/${_ent_MSG_PRE_SEP}}${_ent_MSG_PRE_SEP}"
			fi
			((_ent_TABSET)) && printf '\t%.0s' $(seq 1 "$_ent_TABSET")
			echo >&${std} -e "$1"
			((_ent_COLOR)) && echo -ne "$colorreset"
		fi
		if ((log)); then
			sx=${stdio:-err}
			[[ $sx == 'sys' || $sx == 'die'  ]] && sx='err'
			systemd-cat -t "${_ent_MSG_PRE[*]}" -p "$sx" echo "$( ((errno)) && echo "$errno: ")$1"
		fi
		shift
	done
	if read -t 0; then 
		while read -sr line; do 
			((_ent_COLOR)) && { nc=color$stdio; echo -ne "${!nc}"; }
			if (( ${#_ent_MSG_PRE[*]} )); then
				p=${_ent_MSG_PRE[*]}
				echo -n "${p//[[:blank:]]/${_ent_MSG_PRE_SEP}}${_ent_MSG_PRE_SEP}"
			fi
			((_ent_TABSET)) && printf '\t%.0s' $(seq 1 "$_ent_TABSET")
			echo >&${std} "$line"
			((_ent_COLOR)) && echo -ne "$colorreset"
			if ((log)); then
				sx=${stdio:-err}
				[[ $sx == 'sys' || $sx == 'die'  ]] && sx='err'
				systemd-cat -t "${_ent_MSG_PRE[*]}" -p "$sx" echo "$( ((errno)) && echo "$errno: ")$line"
			fi
		done
	fi
	((tag)) && ((_ent_MSG_USE_TAG)) && [[ -n $stdio ]] && msg.prefix.set '--'
	((die)) && exit "$errno"
	return 0
}
declare -fx 'msgx'
msg()					{ msgx "$@"; }
msg.die() 		{ msgx --die "$@"; }
msg.emerg() 	{ msgx --emerg "$@"; }
msg.alert() 	{ msgx --alert "$@"; }
msg.crit()	 	{ msgx --crit "$@"; }
msg.err() 		{ msgx --err "$@"; }
msg.error()		{ msgx --err "$@"; } #X legacy X#
msg.warning() { msgx --warning "$@"; }
msg.warn() 		{ msgx --warning "$@"; }  #X legacy X#
msg.notice() 	{ msgx --notice "$@"; }
msg.info() 		{ msgx --info "$@"; }
msg.debug() 	{ msgx --debug "$@"; }
msg.sys() 		{ msgx --sys "$@"; }
declare -fx 'msg' 'msg.die' 'msg.emerg' 'msg.alert' 'msg.crit' 'msg.err' 'msg.warning' 'msg.warn' 'msg.notice' 'msg.info' 'msg.debug' 'msg.sys'
if (( ! ${LOG_ALERT:-0} )); then
	declare -xr		_PATH_LOG='/dev/log'
	declare -ixr	LOG_EMERG=0		# system is unusable 
	declare -ixr	LOG_ALERT=1		# action must be taken immediately 
	declare -ixr	LOG_CRIT=2		# critical conditions 
	declare -ixr	LOG_ERR=3			# error conditions 
	declare -ixr	LOG_WARNING=4	# warning conditions 
	declare -ixr	LOG_NOTICE=5	# normal but significant condition 
	declare -ixr	LOG_INFO=6		# informational 
	declare -ixr	LOG_DEBUG=7		# debug-level messages 
	declare -xr		LOG_PRIORITYNAMES='emerg alert crit err warning notice info debug'
fi
declare -x	CR=$'\r' CH9=$'\t' LF=$'\n'
declare -x	OLDIFS="$IFS" IFS=$' \t\n'
declare -nx	OIFS='OLDIFS'
onoff() {
	local o=${1:-0}
	case "${o,,}" in
		on|1)			o=1;;
		off|0)		o=0;;
		*)				o=$(( ${2:-0} ));; 
	esac
	echo -n $((o))
	return 0
}
declare -fx 'onoff'
declare -ix _ent_VERBOSE
[ -t 1 ] && _ent_VERBOSE=1 || _ent_VERBOSE=0
msg.verbose() { return $(( ! _ent_VERBOSE )); }
declare -fx 'msg.verbose'
	is.verbose() { msg.verbose "$@"; };	declare -fx 'is.verbose' #X legacy X#
msg.verbose.set() {
	if (( ${#@} )); then
		_ent_VERBOSE=$(onoff "$1")
	else
		echo -n "$_ent_VERBOSE"
	fi
}
declare -fx 'msg.verbose.set'
	verbose.set() { msg.verbose.set "$@"; }; declare -fx 'verbose.set' #X legacy X#
declare -ix '_ent_MSG_USE_TAG'
_ent_MSG_USE_TAG=1
msg.usetag.set() {
	if (( ${#@} )); then
		_ent_MSG_USE_TAG=$(onoff "$1")
	else
		echo -n $_ent_MSG_USE_TAG
	fi
}
declare -fx 'msg.usetag.set'
declare -x colorreset="\x1b[0;39;49m"
declare -x color="\x1b[0;39;49m"
declare -x color0="\x1b[0;39;49m"
declare -x colordebug="\x1b[35m"
declare -x colorinfo="\x1b[32m"
declare -x colornotice="\x1b[34m"
declare -x colorwarning="\x1b[33m";					declare -nx colorwarn='colorwarning'
declare -x colorerr="\x1b[31m";							declare -nx colorerror='colorerr'
declare -x colorcrit="\x1b[1;31m";					declare -nx colorcritical='colorcrit'
declare -x coloralert="\x1b[1;33;41m"
declare -x coloremerg="\x1b[1;4;5;33;41m";	declare -nx colorpanic='coloremerg'
declare -ix '_ent_COLOR'
_ent_COLOR=1
[ -t 1 ] && _ent_COLOR=1 || _ent_COLOR=0
msg.color() { return $(( ! _ent_COLOR )); }
declare -fx 'msg.color'
	color() { 'msg.color' "$@"; }; declare -fx 'color' #X legacy X#
	is.color() { 'msg.color' "$@"; };	declare -fx 'is.color' #X legacy X#
msg.color.set() {
	if (( ${#@} )); then 
		if [[ $1 == 'auto' ]]; then
			[ -t 1 ] && status=1 || status=0
		else
			status=$1
		fi
		_ent_COLOR=$(onoff "$status" "$_ent_COLOR")
	else 
		echo -n "$_ent_COLOR"
	fi
}
declare -fx 'msg.color.set'
	color.set() { 'msg.color.set' "$@"; };	declare -fx 'color.set' #X legacy X#
declare -ix '_ent_TABWIDTH'
_ent_TABWIDTH=4
msg.tab.width() {
	if (( $# )); then
		_ent_TABWIDTH=$(( $1 ))
		((_ent_COLOR)) && tabs $_ent_TABWIDTH
	else
		echo -n $_ent_TABWIDTH
	fi
	return 0
}
declare -fx 'msg.tab.width'
	tab.width() { 'msg.tab.width' "$@"; }; declare -fx 'tab.width' #X legacy X#
declare -ix '_ent_TABSET'
_ent_TABSET=0
msg.tab.set() {
	if (( $# )); then
		case "$1" in
			0|reset)	_ent_TABSET=0;;
			++)				_ent_TABSET=$((_ent_TABSET+1))			;;
			--)				_ent_TABSET=$((_ent_TABSET-1))			;;
			 *)				if [[ "${1:0:1}" == '+' ]]; then
									_ent_TABSET=$(( _ent_TABSET + ${1:1} ))
								elif [[ "${1:0:1}" == '-' ]]; then
									_ent_TABSET=$(( _ent_TABSET - ${1:1} ))
								else
									_ent_TABSET=$(( $1 ))						
								fi
								;;
		esac
		(( _ent_TABSET < 0 )) &&	_ent_TABSET=0 # please, curb your enthusiasm.
	else
		echo -n $_ent_TABSET
	fi
	return 0
}
declare -fx	'msg.tab.set'
	tab.set() { 'msg.tab.set' "$@"; }; declare -fx 'tab.set' #X legacy X#
declare -x '_ent_MSG_PRE_SEP'
_ent_MSG_PRE_SEP=': '
msg.prefix.separator.set() {
	if (( $# ));	then 
		_ent_MSG_PRE_SEP="$1" 
	else 
		echo -n "$_ent_MSG_PRE_SEP"
	fi
}
declare -fx 'msg.prefix.separator.set'
declare -ax '_ent_MSG_PRE'
_ent_MSG_PRE=()
msg.prefix.set() {
	if (( $# ));	then 
		local -i add=0 sub=0
		if [[ $1 == '++' ]]; then
			shift; add=1
		elif [[ $1 == '--' ]]; then
			shift; sub=1 
		else
			_ent_MSG_PRE=( "$1" )
			return 0
		fi
		if ((add)); then
			_ent_MSG_PRE+=( "${1:-}" )
		elif ((sub)); then
			if (( ${#_ent_MSG_PRE[@]} > 1 )); then
				_ent_MSG_PRE=( ${_ent_MSG_PRE[@]:0:${#_ent_MSG_PRE[@]}-1} )
			else
				_ent_MSG_PRE=()
			fi
		fi
		return 0
	fi
	if [[ -n ${_ent_MSG_PRE[*]:-} ]]; then
		local p
		p=${_ent_MSG_PRE[*]}
    echo -n "${p//[[:blank:]]/${_ent_MSG_PRE_SEP}}${_ent_MSG_PRE_SEP}"
	else
		echo -n ''
	fi
	return 0
}
declare -fx 'msg.prefix.set'
msg.line() {
	((_ent_VERBOSE)) || return 0
	local -i  width=78 screencols=0 plen
	local --  repchar='_'	sx
	if (( $# )); then
		repchar="${1:0:1}"
		shift
		[[ -n "${1:-}" ]] && screencols=$1
	fi
	if (( ! screencols )); then
		local -- IFS=' ' sx
		local -ai sz
		mapfile 2>/dev/null -d' ' -t sz < <(stty size) || sz=()
		if (( ${#sz[@]} )); then
			screencols=$(( sz[1] ))
		else
			screencols=$(( ${COLUMNS:-78} ))
		fi
		IFS=$' \t\n'
	fi
	sx="${_ent_MSG_PRE[*]}${_ent_MSG_PRE_SEP[*]}" || sx=''
	plen=$(( ${#sx} + ${#_ent_MSG_PRE[@]} ))
	((plen)) || plen=1
	width=$(( (screencols - plen - (_ent_TABSET * _ent_TABWIDTH)) ))
  msg "$(head -c $width < /dev/zero | tr '\0' "${repchar:-_}")"
	return 0
}
declare -fx 'msg.line'
	msgline() { 'msg.line' "$@"; }; declare -fx 'msgline' #X legacy X#
msg.yn() {
	((_ent_VERBOSE)) || return 0
	[ -t 0 ] || return 0
	local stdio=''
	if (($#)); then
		if [[ ${1:0:2} == '--' ]]; then
			stdio="$1"
			shift
		fi
	fi
	local question="${1:-}" yn=''
	question=$(msgx $stdio --notag "$question (y/n)" 2>&1 )
	question="${question//$'\n'/ }"
	while true; do
		read -e -r -p "$question" yn
		case "${yn,,}" in
			[y]* ) return 0;;
			[n]* ) return 1;;
			* ) msg.err 'Answer [y]es or [n]o.';;
		esac
	done
}
declare -fx 'msg.yn'
declare -x '_ent_SCRIPT_VERSION'
_ent_SCRIPT_VERSION='0.0.0'
version() { echo -n "$_ent_SCRIPT_VERSION"; return 0; }
declare -fx 'version'
version.set() {
	if (( ${#@} )); then _ent_SCRIPT_VERSION="$1"
								else echo -n "$_ent_SCRIPT_VERSION"
	fi
	return 0
}
declare -fx 'version.set'
declare -ix '_ent_DRYRUN'
_ent_DRYRUN=0
is.dryrun() { return $(( ! _ent_DRYRUN )); }
declare -fx 'is.dryrun'
	dryrun() { 'is.dryrun' "$@"; }; declare -fx 'dryrun' #X legacy X#
dryrun.set() {
	if (( $# )); then 
		_ent_DRYRUN=$(onoff "$1" "$_ent_DRYRUN")
	else 
		echo -n $_ent_DRYRUN
	fi
	return 0
}
declare -fx 'dryrun.set'
declare -ix '_ent_DEBUG'
_ent_DEBUG=0
is.debug() {	return $(( ! _ent_DEBUG )); }
declare -fx 'is.debug'
	debug() { is.debug "$@"; }; declare -fx 'debug' #X legacy X#
debug.set() {
	if (( $# )); then _ent_DEBUG=$(onoff "$1" $_ent_DEBUG)
	else							echo "$_ent_DEBUG"
	fi
	return 0
}
declare -fx 'debug.set'
declare -ix '_ent_STRICT'
_ent_STRICT=0
is.strict() { return $(( ! _ent_STRICT )); }
declare -fx 'is.strict'
strict.set() {
	if (( $# )); then
	 	local opt='+'
		_ent_STRICT=$(onoff "$1" $_ent_STRICT)
		((_ent_STRICT)) && opt='-'
		set ${opt}o errexit ${opt}o nounset ${opt}o pipefail #${opt}o noclobber
	else
		echo -n "$_ent_STRICT"
	fi
	return 0
}
declare -fx 'strict.set'
exit_if_not_root() {
	is.root || msg.die "$PRG can only be executed by root user."
	return 0
}
declare -fx 'exit_if_not_root'
entities.help() {
	"${ENTITIES:-/lib/include/entities}/entities.help" "$@" || return $?
	return 0
}
declare -fx 'entities.help'
check.dependencies() {
	(( ${#@} )) || return 0
	local -- needed_dep=''
	local -- missing_deps=''
	local -i missing=0
	if [[ "${1:-}" == '--quiet' || "${1:-}" == '-q' ]]; then
		local -i _ent_VERBOSE=0 
		shift
	fi
	for needed_dep in "$@"; do
		if [[ ! -x "$needed_dep" ]]; then
			if [[ ! -x $(which "$needed_dep") ]]; then
				if ! declare -Fp "$needed_dep" >/dev/null 2>&1; then
					if ! hash "$needed_dep" >/dev/null 2>&1; then
						((missing++))
						missing_deps+="$needed_dep "
					fi
				fi
			fi
		fi
	done
	((missing && _ent_VERBOSE)) && \
			echo >&2 "These dependencies are missing: ${missing_deps}"
	return "$missing"
}
declare -fx 'check.dependencies'
trap.breakp() { 
	local b='' prompt=${1:-}
	(( ${#prompt} )) && prompt=" $prompt"
	read -r -e -n1 -p "breakpoint${prompt}: continue? y/n " b
	[[ "${b,,}" == 'y' ]] || exit 1
	return 0
}
declare -fx 'trap.breakp'
	breakp() { 'trap.breakp' "$@"; }; declare -fx 'breakp' #X legacy X#
if (( ! ${_ent_MINIMAL:-0} )); then
	shopt -s globstar
	if [[ -d "${ENTITIES:-/lib/include/entities}/e.d" ]]; then
		declare '_e'
		declare -a _userbash=()
		for _e in "${ENTITIES:-/lib/include/entities}"/e.d/**/*.bash; do
			if [[ -r "$_e" ]]; then
				if [[ ! -L "$_e" ]] ; then
					_userbash+=( "$_e" )
				else
					source "$_e" || echo >&2 "**Source file [$_e] could not be included!" && true
				fi
			fi
		done
		for _e in "${_userbash[@]}"; do
			source "$_e" || echo >&2 "**Source file [$_e] could not be included!" && true
		done
		unset _e _userbash
	fi
	if ! check.dependencies \
			basename dirname readlink mkdir ln cat \
			systemd-cat wget base64 seq tty find touch tree lynx; then
		echo >&2 'Warning: Dependencies not found. entities.bash may not run correctly.'	
	fi 
fi
_ent_scriptstatus+="[entities loaded $(date +'%F %T')]"
if [[ -f '/etc/entities/entities.bash.startup.conf' ]]; then
	source '/etc/entities/entities.bash.startup.conf'
fi
declare -xig '_ent_LOADED'
_ent_LOADED=1
declare -gx '_ent_EDITOR'
	_ent_EDITOR="$(command -v nano 2>/dev/null || command -v joe 2>/dev/null)"
	declare -gx 'EDITOR'
	if [[ -z "${EDITOR:-}" ]]; then
		[[ -n "${_ent_EDITOR:-}" ]] && EDITOR="${_ent_EDITOR}"
		if [[ -n "${SUDO_EDITOR:-}" ]]; then
			EDITOR="${SUDO_EDITOR}"
		elif [[ -n "${SELECTED_EDITOR:-}" ]]; then
			EDITOR="${SELECTED_EDITOR}"
		elif [[ -r "${HOME:-}/.selected_editor" ]]; then
			source "${HOME:-}/.selected_editor" || true
			[[ -n "${SELECTED_EDITOR:-}" ]] && EDITOR="${SELECTED_EDITOR}"
		elif [[ -x /etc/alternatives/editor ]]; then
			EDITOR='/etc/alternatives/editor'
		fi
	fi
	declare '_ed_'
	_ed_="${EDITOR%% *}"
	_ed_="$(command -v "${_ed_}" 2>/dev/null)"
	if [[ ! -x "${_ed_}" ]]; then
		echo >&2 "Editor [${EDITOR}] not found! Using [${_ent_EDITOR}]"
		EDITOR="${_ent_EDITOR}"
	else
		[[ $EDITOR != *' '* ]] && EDITOR='' 
		EDITOR="${_ed_} ${EDITOR#* }"
	fi
	unset '_ed_'
	export EDITOR _ent_EDITOR
entities.location() { echo -n "ENTITIES=\"$ENTITIES\";PATH=\"$PATH\""; }
declare -fx entities.location
declare -xg _ent_VERSION
_ent_VERSION='0.98.420.516.1'
chgConfigVar() {
	local Profile=${1:-} key
	shift
	if [[ ! -f $Profile ]]; then
		cat >"$Profile" <<-etxx
		etxx
	fi
	while (($#)); do
		key="$1"
		if [[ "${key:0:1}" == '!' ]]; then
			sed -i "/^\s*${key:1}=.*/d" "$Profile"
			shift; continue
		fi
		keyval="$key='${2:-}'"
		if grep -q "^[[:blank:]]*${key}=" "$Profile"; then
			sed -i "s!^\s*${key}=.*!${keyval}!" "$Profile"
		else
			echo "$keyval" >>"$Profile"
		fi
		shift; (($#)) && shift
	done
}
declare -fx chgConfigVar
convertCfg2php() {
	local infile='/dev/stdin' outfile='/dev/stdout'
	if (($#)); then
		infile="$1"
		shift
		(($#)) && outfile="$1"
	fi
	(	echo '<?'
		while read -r line; do
			[[ -z $line || ${line:0:2} == '#!' ]] && continue
			if [[ ${line:0:1} == '#' ]]; then
				line="//${line:1}"
			elif [[ $line == *'='* ]]; then
				line="\$${line};"; line=${line//;;/;}		
			fi
			echo "$line"
		done <"$infile"
		echo '?>'
	) >"$outfile"
}
declare -fx 'convertCfg2php'
editorsyntaxstring() {
	local FileType="${1:-text}"
	local FileName="${2:-}"
	local editor
	editor="${3:-${EDITOR}}"
	local opt=''
	editor="$(basename "${editor%% *}")"
	case "$FileType" in
		html)		FileType='php';;
		bash)		FileType='sh';;
	esac
	case "$editor" in
		joe) 	[[ $FileType == 'text' ]] && FileType='sh'
					if [[ ! -f "/usr/share/joe/syntax/$FileType.jsf" ]]; then 
						echo >&2 "joe: Syntax file [$FileType].jsf not found for [$FileName]"
						FileType=text
						opt=''
					else
						opt="-syntax $FileType"			
					fi
					;;
		nano)
					opt="--syntax=$FileType"
					;;
		*)		msg.err "Editor [$editor] not found.";;
	esac
x	echo "$EDITOR $opt $FileName"
}
declare -fx editorsyntaxstring
declare -Ax _ent_TextFileTypes=(	
			['ASCII text']='text'
			['Bourne-Again shell script']='bash'
			['XML 1.0 document']='xml'
			['HTML document']='html'
			['POSIX shell script']='sh'
			['PHP script']='php'
			['C source']='c'
			['SMTP mail']='smtp'
			['exported SGML document']='sgml'
			['Windows WIN.INI']='ini'
			['TeX document']='tex'
			['Python script']='python'
			['Non-ISO extended-ASCII text']='text'
			['Perl5 module source']='perl'
			['BSD makefile script']='bsdmake'
		)
textfiletype() {
	local -- testfile='' ext
	local -i typeonly=0
	local -- File=''
	local -- FileType='text'
	while (( $# )); do
		testfile="${1}"
		[[ $testfile == '-t' ]] && { typeonly=1; shift; continue; }
		[[ -d "$testfile" ]] && { shift; continue; }
		FileType=''
		ext=${testfile##*\.}
		case "$ext" in
			php)				FileType='php';;
			htm|html)		FileType='html';;
			sh|conf)		FileType='sh';;
			bash|cnf)		FileType='bash';;
			c|h)				FileType='c';;
			xml)				FileType='xml';;
		esac
		if [[ -z $FileType ]]; then
			if [[ -f "$testfile" ]]; then
				h="$( { head -c 64 "$testfile" 2>/dev/null || echo ' '; } | strings -w 2>/dev/null)" || h=''
				if 	 [[ "$h" =~ ^\#\!.*/bash.* ]];	then	
					FileType='bash'
				elif [[ "$h" =~ ^\#\!.*/sh.*   ]];	then	
					FileType='sh'
				elif [[ "$h" =~ ^\#\!.*/php.*  || ${h} == '<?' || ${h:0:5} == '<?php' ]];	then	
					FileType='php'
				else
					File="$(trim "$(file "$testfile" | grep ' text' | cut -d':' -f2)")"
					[[ -z $File ]] && { shift; continue; }
					File=${File%%,*}
					[[ -z $File ]] && File='text'
					if [[ "${!_ent_TextFileTypes[*]}" == *"$File"* ]]; then
						FileType="${_ent_TextFileTypes[$File]}"
						[[ -z $FileType ]] && FileType='text'
					fi
				fi
			fi
		fi
		[[ -z $FileType ]] && FileType='text'
		if ((typeonly)); then
			echo "${FileType}"
		else
			echo "${FileType} ${testfile}"
		fi
		shift
	done
}
declare -fx textfiletype
mktempfile() {
	local TmpDir TmpFile
	TmpDir="${TMPDIR:-/tmp}/${1:-entities}"
	mkdir --mode=0770 -p "${TmpDir}" || { echo ''; return; }
	TmpFile="$(mktemp "${TmpDir}/${PRG:-$(basename "$0")}_XXXX")"
	echo "$TmpFile"
	return 0
}
declare -fx mktempfile
declare -x TMPDIR="${TMPDIR:-/tmp}"
tmpdir.set() {
	if (( $# )); then
		local tmp=$1
		if [[ ! -d "$tmp" ]]; then
			mkdir -m 777 -p "$tmp" || { echo ''; return 1; }
		fi
		if [[ -w "$tmp" ]]; then
			TMPDIR="$tmp"
		elif [[ -n "${2:-}" ]]; then
			if [[ -d "$2" ]]; then
				mkdir -m 777 -p "$2" || { echo ''; return $?; }
			fi
			if [[ -w "$2" ]]; then
				TMPDIR="$2"
			else
				echo ''
				return 1
			fi
		fi
	fi
	echo "$TMPDIR:-/tmp"
}
declare -fx 'tmpdir.set'
rmslash2() { echo "${@//+(\/)\//\/}"; }
declare -fx rmslash2
addslashes() {
	read line; 
	while [[ "$line" != "" ]]; do 
		echo "$line" | sed "s/'/\\\\'/g; s/\"/\\\\\"/g;"
		read line
	done
	return 0
}
declare -fx addslashes
elipstr() {
	local str=${1:-} pd=''
	str=$(echo $str | head -n1)
	local -i width=${2:-0} 
	local -i strlen=${#str} sx=0
	((width)) || width=$(( $(tput cols) - 1 ))
	((width<6)) && width=78
	((strlen <= width)) && { echo $str; return; }
	sx=$(((width-2) / 2))
	((((sx*2)+2) < width)) && pd='.'
	echo "${str:0:$sx}${pd}..${str: -$sx}"
}
declare -fx elipstr
explode() {	
	local IFS
	local -a a
	IFS="$1" a=( "${@:2}" )
	echo "${a[@]}"; 
}
declare -fx explode
implode() {
	local x d=','
	[[ ${1:-} == '-d' ]] && { shift; d="${1:-,}"; shift; }
	printf -v x "${d}%s" "$@"
	echo "${x:1}"
}
declare -fx implode
in_array() { 
	local t; 
	for t in ${2:-}; do [[ $t == "$1" ]] && return 0; done
	return 1 
}
declare -fx 'in_array'
is.number() {	[[ ${1:-} =~ ^[-+]?[0-9.]+$ ]] || return 1; }
declare -fx 'is.number'
is.int() {	[[ ${1:-} =~ ^[-+]?[0-9]+$ ]] || return 1; }
declare -fx 'is.int'
shopt -s extglob
post_slug() {
	local str="${1:-}" repl="${2:--}" preserve_case="${3:-0}"
	if ((preserve_case)); then
		str="$(echo "${str}"   | iconv -f UTF-8 -t ASCII//TRANSLIT )"
	else 
		str="$(echo "${str,,}" | iconv -f UTF-8 -t ASCII//TRANSLIT )"
	fi
	str="${str//[^[:alnum:]]/${repl}}"
	str="${str//+([${repl}])/${repl}}"
	[[ ${str:0:1} == "$repl" ]] && str="${str:1}"
	[[ ${str: -1} == "$repl" ]] && str="${str:0: -1}"
	echo -n "$str"
}
declare -fx post_slug
remove_accents() {
	echo -n "${1:-}" | iconv -c -f UTF-8 -t ASCII//TRANSLIT//IGNORE
}
declare -fx remove_accents
sqslash() {
	if (($#)); then
		echo "${@//\'/\\\'}"
	else
		while read -r l; do echo "${l//\'/\\\'}"; done
	fi
}
declare -fx sqslash
dqslash() {
	if (($#)); then
		echo "${@//\"/\\\"}"
	else
		while read -r l; do echo "${l//\"/\\\"}"; done
	fi
}
declare -fx dqslash
remsp2() { 
	local -i incblank=0
	if (($#)); then
		if [[ $1 == '-b' ]]; then
			incblank=1
			shift
		fi
	fi
	if (($#)); then 
		if ((incblank)); then
			trim "${1//+( )/ }"; echo
		else
			trim "${1//+([[:blank:]])/ }"; echo
		fi
		return $?
	fi
	local l
	if ((incblank)); then
		while read -r l; do trim "${l//+([[:blank:]])/ }"; echo; done
	else
		while read -r l; do trim "${l//+( )/ }"; echo; done
	fi
	return $?
}
declare -fx remsp2
s() {	(( ${1:-1} == 1 )) || echo -n 's'; }
declare -fx s
str_str() {
	local str
	str="${1#*${2}}"
 	str="${str%%${3}*}"
 	echo -n "$str"
}
declare -fx str_str
titlecase() { 
	(( $# )) || { echo ''; return 0; }
	[[ -z $* ]] && { echo ''; return 0; } 
	set ${*,,}
	echo ${*^}
}
declare -fx titlecase
trim()  { 
	local v="$*"
	v="${v#"${v%%[![:space:]]*}"}"
	v="${v%"${v##*[![:space:]]}"}"
	echo -n "$v"
}
ltrim() {
	local v="$*"
	v="${v#"${v%%[![:space:]]*}"}"
	echo -n "$v"
}
rtrim() {
	local v="$*"
	v="${v%"${v##*[![:space:]]}"}"
	echo -n "$v"
}
declare -fx trim rtrim ltrim
calcfp() { echo "$*" | bc -l; }
cleanup() {
	local -i exitcode=$?
	if ((exitcode)); then
		if ((_ent_DEBUG)); then
			msg.info "Debug [${PRG:-}]:"
			msg.info "$(set | grep ^_ent_)"
			msg.info "$(set | grep ^BASH	| grep -v BASH_VERSINFO)"
		fi
		if ((exitcode > 1)) && ((_ent_DEBUG)); then
			msg.err "script=[${PRG:-}] 
							exit=[$exitcode] 
							line=[${2:-}] 
							\$1=[${1:-}] 
							fn[]=[${FUNCNAME[*]// /\|}]
							ln=[${BASH_LINENO[*]:-}]
							bs=[${BASH_SOURCE[*]:-}]"
		fi
	fi
	exit "$exitcode"
}
declare -fx cleanup
exit_if_already_running() {
	return 0
}
declare -fx exit_if_already_running
declare -Aixg _ent_HRint=( [b]=1 [k]=1024 [m]=1024000 [g]=1024000000 [t]=1024000000000 [p]=1024000000000000 \
										 [B]=1 [K]=1000 [M]=1000000 [G]=1000000000 [T]=1000000000000 [P]=1000000000000000 )
hr2int() {
	local num='' h='' fmt=si
	while (($#)); do
		num=${1:-0} 
 		h=${num: -1}
		if [[ ${h:-} =~ ^[-+]?[0-9.]+$ ]]; then 
			fmt=si
		else
			local LC_ALL=C
			if [[ "$h" > 'a' ]]; then 
				fmt=iec
			else 
				fmt=si		
			fi
		fi
		numfmt --from="$fmt" "${num^^}" || return 1
		shift 1
	done
	return 0
}
declare -fx hr2int
int2hr() {
	local -i num 
	local fmt hr
	while (($#)); do
		num=$(( ${1:-0} )) || { echo >&2 "Invalid number [$num]"; return 1; }
 		fmt=${2:-si}
		fmt=${fmt,,}
		hr=$(numfmt --to="$fmt" "$num") || { echo >&2 "Invalid hr code [$h]"; return 1; }
		[[ $fmt == 'iec' ]] && hr="${hr,,}"
		echo "$hr"
		shift 1
		(($#)) && shift 1
	done
	return 0	
}
declare -fx int2hr
is.interactive() {
	declare report=${1:-}
	declare -i isit=0 echoit=0
	if [[ -n $report ]]; then
		case "${1:-}" in
			report)		echoit=1;;
			noreport)	echoit=0;;
		esac
	fi
	if [[ -t 1 ]]; then 
		isit=1
		((echoit)) && echo "${isit}: STDOUT is attached to TTY."
	fi
	if [[ "${PS1+x}" == 'x' ]]; then
		((echoit)) && echo "${isit}: PS1 is set. This is possibly an interactive shell."
		if (( ${#PS1} > 1 )); then
			isit=1
			((echoit)) && echo "${isit}: PS1 is set and has a length -gt 1. This is very probably an interactive shell."
		fi
	fi
	if [[ "$-" == *"i"* ]]; then
		isit=1
		((echoit)) && echo "${isit}: \$- = *i*"
	fi
	if [[ -p /dev/stdout ]]; then
		isit=0
		((echoit)) && echo "${isit}: STDOUT is attached to a pipe."
	fi
	if [[ ! -t 1 && ! -p /dev/stdout ]]; then
		isit=0
		((echoit)) && echo "${isit}: STDOUT is attached to a redirection."
	fi
	if ((echoit)); then
		((isit)) && echo '1: is interactive' || echo '0: is not interactive'
	fi
	return $(( ! isit ))
}
declare -fx 'is.interactive'
	is_interactive() { 'is.interactive' "$@"; }; declare -fx 'is_interactive' #X legacy X#
is.root() {
	[[ "$(whoami)" == 'root' || $EUID == 0 ]] && return 0
	return 1
}
declare -fx 'is.root'
is.tty() { 
	tty --quiet	2>/dev/null	|| return $?
	return 0
}
declare -fx 'is.tty'
	is_tty() { 'is.tty'; }; declare -fx 'is_tty'
pause() { 
	local -i timeout=86400
	if [[ "${1:-}" == '-t' ]]; then
		shift
		timeout=${1:-0}
		shift
	fi
	echo
	read -t "$timeout" -n1 -r -p "${*:- *Pause*} " || { echo; return 1; }
	echo
	return 0
}
declare -fx pause
declare -x _ent_perrnoListFile="${ENTITIES:-/lib/include/entities}/docs/perrno.list"
perrno() {
	(($#)) || return 0 
	local OS=${2:-}
	[[ ! -f ${_ent_perrnoListFile} ]] && _perrno_gen_errors
	grep -i "$OS ${1}\:" "${_ent_perrnoListFile}" 2>/dev/null
	return 0
}
	_perrno_gen_errors() {
		(
			local -i i=0
			local t IFS=$'\n'
			if [[ ! -d $(dirname "${_ent_perrnoListFile}") ]]; then
				mkdir -p "$(dirname "${_ent_perrnoListFile}")"
			fi
			> "${_ent_perrnoListFile}"
			while ((i<513)); do 
				t="$(perror $i)"
				t="${t// error code/}"
				t="${t/  / }"
				[[ -n "$t" ]] && echo "$t" >> "${_ent_perrnoListFile}"
				((i++))
			done
		) &>/dev/null
		return 0
	}
declare -fx perrno
phpini_short_tags() { 
  PHPdir=$(php -r 'echo phpversion();') || return 1
  PHPdir=${PHPdir%-*}; PHPdir=${PHPdir%.*}
  [[ -z $PHPdir ]]  && return 2
  sed -i 's/^\s*short_open_tag.*/short_open_tag = On/g' "/etc/php/$PHPdir/cli/php.ini" \
      || return 3
  [[ -f "/etc/php/$PHPdir/apache2/php.ini" ]] \
    && sed -i 's/^\s*short_open_tag.*/short_open_tag = On/g' "/etc/php/$PHPdir/apache2/php.ini"
  return 0
}
declare -fx 'phpini_short_tags'
rtfm() { 
	if [[ -z ${1:-} || ${1:-} == '-h' || ${1:-} == '--help' ]]; then
		cat <<-etx
		Script  : rtfm
		Desc    : read-the-fucking-manual wrapper for help -> man -> entities.help -> google
		Synopsis: rtfm "command"
		etx
		return 0
	fi
	builtin help "$@" 2>/dev/null && return 0
	/usr/bin/man "$@" 2>/dev/null && return 0
	"$ENTITIES/entities.help" 'function' "$@" 'exit' 2>/dev/null && return 0 
	"${BROWSER:-$(command -v w3m 2>/dev/null || command -v lynx 2>/dev/null)}" "http://www.google.com/search?q=linux+bash+%2B$*" \
			&& return 0
}
declare -fx rtfm
declare -x _ent_EXITTRAPFUNCTION='{ cleanup $? ${LINENO:-0}; }'
trap.function() {
	if (($#));	then 
		_ent_EXITTRAPFUNCTION="$1" 
	else 
		echo -n "$_ent_EXITTRAPFUNCTION"
	fi
	return 0
}
declare -fx 'trap.function'
declare -ix _ent_EXITTRAP=0
trap.set() {
	if (( $# )); then
		_ent_EXITTRAP=$(onoff "${1}" ${_ent_EXITTRAP})
		if ((_ent_EXITTRAP)); then
			trap "$_ent_EXITTRAPFUNCTION" EXIT
		else
			trap -- EXIT
		fi
	else
		echo -n "${_ent_EXITTRAP}"
	fi
	return 0
}
declare -fx 'trap.set'
urldecode() { echo -e "$(sed 's/+/ /g;s/%\(..\)/\\x\1/g;')"; }
declare -fx urldecode
urlencode() {
	local LC_ALL=C encoded='' c
	local -i i strlen=${#1}
	for (( i=0 ; i<strlen ; i++ )); do
		 c="${1:$i:1}"
		 case "$c" in
				[A-Za-z0-9/_.~-])	encoded="${encoded}$c";;
				*)								printf -v encoded "%s%%%02x" "$encoded" "'${c}";;
		 esac
	done
	echo -n "$encoded"
}
declare -fx urlencode
website_online() {
	while(($#)); do
		( curl --head --insecure "$1" 2>/dev/null | grep -w "200\|301" >/dev/null) ||	return 1
		shift
	done
	return 0	
}
declare -fx 'website_online'
xselect() {
	local pathname reply prompt='Select: '
	local -i COLUMNS
	COLUMNS=$(tput cols 2>/dev/null || echo '78')
	local -i i stcol numcols
	local -i columnwidth itemwidth=10 itempad=2 numpad=0
	local -a Items=() ItemsDisp=()
	i=0
	while(($#)); do
		case $1 in
			-p|--prompt)		shift; (($#)) && prompt="$1";;
			-i|--itempad)		shift; (($#)) && itempad=$1;;
			-w|--itemwidth)	shift; (($#)) && itemwidth=$1;;
			-c|--columns)		shift; (($#)) && COLUMNS=$1;;
			*)	pathname="$1"
					Items+=( "$pathname" )
					pathname=$(basename "$pathname")
					(( ${#pathname} > itemwidth )) && itemwidth=${#pathname}
					ItemsDisp+=( "$pathname" )
					i+=1;;
		esac
		shift
	done
	numpad=${#i}
	columnwidth=$((numpad + 2 + itemwidth + itempad))
	numcols=$((COLUMNS / columnwidth))
	while((1)); do
		stcol=0; i=0
		for pathname in "${ItemsDisp[@]}"; do
			i+=1
			printf "%${numpad}.${numpad}d) %-${itemwidth}.${itemwidth}s%-${itempad}.${itempad}s" "$i" "$(basename "$pathname")" '           ' >&2
			stcol+=1; ((stcol >= numcols)) && { stcol=0; echo >&2; } 
		done
		((stcol)) && echo	>&2
		read -r -p "$prompt" reply >&2
		[[ -z $reply ]] && continue
		[[ $reply == '0' || $reply == 'q' ]] && { echo "!$reply"; return 0; }		
    [[ ${reply:-} =~ ^[-+]?[0-9]+$ ]] || continue
		i=${reply%%)*}	
		if (( i > "${#Items[@]}" || i < 1 )); then
			echo 'Invalid selection.' >&2
		else
			echo "${Items[$i-1]}"
			return 0
		fi
	done
}
declare -fx 'xselect'
urlpayload_encode() {	
	echo -n "$( urlencode "$(payload_encode "${1}")" )" 
	return 0
}
declare -fx urlpayload_encode
payload_encode() { 
	echo -n "$( echo -n "${1:-}" | gzip 2>/dev/null | base64 -w0 2>/dev/null)" 
	return 0
}
declare -fx payload_encode 
payload_decode() {
	local str="${1:-}" bstr='' gzipid
	gzipid="$(echo -e "\x1f\x8b")" 
	[[ -z "$str" ]] && { echo -n ''; return 0; }
  bstr="$(echo "$str" | base64 -d -i 2> /dev/null | tr -d '\r\n\0')"
  if ((! ${#bstr})); then
		echo -n "$str"
		return 0
	fi
	if [[ "${bstr:0:2}" == "$gzipid" ]]; then
		echo -n "$( echo -n "${str}" | base64 -d | gzip -d)"
	else
		echo -n "${bstr}"
	fi
	unset str bstr
	return 0
}
declare -fx payload_decode
